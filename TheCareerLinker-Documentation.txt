1. Admin Plateform
Authentication:
•	Login: Admins can securely access the system using their credentials.
•	Logout: Terminate the session securely.

Accessiblities:
•   Student Management:
    o	View and manage profiles of Students.
    o	Handle Student queries and review.
•   Course Management:
    o	Can add new course or update existing course.
•  Developer Management:
    o	View and manage profiles of Developers.
•  Manage Assessment:
    o	Create new Assessment or update existing Assessment.

•  Manage Assessment:
    o	Create new Assessment or update existing Assessment.


2. Student Plateform
Authentication:
•	Login: Admins can securely access the system using their credentials.
•	Logout: Terminate the session securely.

Accessiblities:
•   Profile Management:
    o	Student can manage his/her profile.
    o	Can give review or can ask queries.
•   General Accessiblities:
    o	Student can enroll for courses.
    o	Student can give online Assessment.
    o	Student can Practice for interview.
    o	Student can Apply for internship/job to companies like [Small,Medium,MNC].



3. Developer Plateform
Authentication:
•	Login: Admins can securely access the system using their credentials.
•	Logout: Terminate the session securely.

•   Profile Management:
    o	Developer can manage his/her profile.
•   General Accessiblities:
    o	Developer can create Assessment
    o	Developer can provide the practice session of interview to the student.

•   Shortlisting or Student selection:
    o	Select student based on their performance and quiz score.
    o	Handle Student queries related to course.












--    o	Developer can arrenge interview in the company. --









# def next_documentation(request,course_data_id,id):
#     course_data = devModels.Online_Certification_Course.objects.get(id=course_data_id)
#     dev_id = course_data.dev_id
#     course_module_data = devModels.Module_list.objects.filter(course_id=course_data_id, dev_id=dev_id)
#     module_stage_data_details = {}
#     module_content_data_details = {}
#     for module_data in course_module_data:
#         module_id = module_data.id
#         module_stage_data = list(devModels.Module_Stage.objects.filter(module_id=module_id, dev_id=dev_id))
#         if module_stage_data:
#             module_stage_data_details[module_id] = module_stage_data

#             for stage in module_stage_data:
#                 stage_id = stage.id
#                 course_module_content_data = list(devModels.Course_Module_Content.objects.filter(stage_id=stage_id,dev_id=dev_id))
#                 if course_module_content_data:
#                     module_content_data_details[stage_id] = course_module_content_data
#                 print("------content_data---------------------------------------->\n",course_module_content_data)
#                 print("===module_content_data_details=====================>\n",module_content_data_details)
#                 print("===stage_id=====================>\n",module_content_data_details.keys())
#                 print("===content_data=====================>\n",module_content_data_details.values())
#                 print("===items()=====================>\n",module_content_data_details.items())
#     course_document_content_data = devModels.Course_Module_Content.objects.get(id=id)
#     context = {
#         "course_document_content_data":course_document_content_data,
#         'course_data': course_data,
#         'course_data_id':course_data.id,
#         'stage_data_id':stage_id,
#         'course_module_data': course_module_data,
#         'module_stage_data': module_stage_data_details,
#         'module_content_data': module_content_data_details,
#     }
#     return redirect(reverse('course_document_content', args=[course_data_id,id+1]))





# def previous_documentation(request,course_data_id,id):
#     course_data = devModels.Online_Certification_Course.objects.get(id=course_data_id)
#     dev_id = course_data.dev_id
#     course_module_data = devModels.Module_list.objects.filter(course_id=course_data_id, dev_id=dev_id)

#     module_stage_data_details = {}
#     module_content_data_details = {}
#     for module_data in course_module_data:
#         module_id = module_data.id
#         module_stage_data = list(devModels.Module_Stage.objects.filter(module_id=module_id, dev_id=dev_id))
#         if module_stage_data:
#             module_stage_data_details[module_id] = module_stage_data

#             for stage in module_stage_data:
#                 stage_id = stage.id
#                 course_module_content_data = list(devModels.Course_Module_Content.objects.filter(stage_id=stage_id,dev_id=dev_id))
#                 if course_module_content_data:
#                     module_content_data_details[stage_id] = course_module_content_data
#                 print("------content_data---------------------------------------->\n",course_module_content_data)
#                 print("===module_content_data_details=====================>\n",module_content_data_details)
#                 print("===stage_id=====================>\n",module_content_data_details.keys())
#                 print("===content_data=====================>\n",module_content_data_details.values())
#                 print("===items()=====================>\n",module_content_data_details.items())

#     course_document_content_data = devModels.Course_Module_Content.objects.get(id=id)
#     context = {
#         "course_document_content_data":course_document_content_data,
#         'course_data': course_data,
#         'course_data_id':course_data.id,
#         'stage_data_id':stage_id,
#         'course_module_data': course_module_data,
#         'module_stage_data': module_stage_data_details,
#         'module_content_data': module_content_data_details,
#     }
#     return redirect(reverse('course_document_content', args=[course_data_id,id-1]))





# def previous_documentation(request, course_data_id, id):
#     course_data = devModels.Online_Certification_Course.objects.get(id=course_data_id)
#     dev_id = course_data.dev_id
#     course_module_data = devModels.Module_list.objects.filter(course_id=course_data_id, dev_id=dev_id)

#     module_stage_data_details = {}
#     module_content_data_details = {}

#     for module_data in course_module_data:
#         module_id = module_data.id
#         module_stage_data = list(devModels.Module_Stage.objects.filter(module_id=module_id, dev_id=dev_id))
#         if module_stage_data:
#             module_stage_data_details[module_id] = module_stage_data

#             for stage in module_stage_data:
#                 stage_id = stage.id
#                 course_module_content_data = list(devModels.Course_Module_Content.objects.filter(stage_id=stage_id, dev_id=dev_id))
#                 if course_module_content_data:
#                     module_content_data_details[stage_id] = course_module_content_data

#     try:
#         course_document_content_data = devModels.Course_Module_Content.objects.get(id=id)
#     except devModels.Course_Module_Content.DoesNotExist:
#         raise Http404("Content not found")

#     # ✅ Extract stage_id properly
#     stage_id = course_document_content_data.stage_id.id  

#     # Get the first stage and first content of the course
#     first_stage = devModels.Module_Stage.objects.filter(
#         module_id__in=course_module_data.values_list('id', flat=True), dev_id=dev_id
#     ).order_by('id').first()

#     first_content = devModels.Course_Module_Content.objects.filter(
#         stage_id=stage_id, dev_id=dev_id
#     ).order_by('id').first()

#     # Check if the current content is the first in the stage
#     is_first_content = (course_document_content_data.id == first_content.id) and (stage_id == first_stage.id)

#     # Find the previous content
#     prev_content = devModels.Course_Module_Content.objects.filter(
#         stage_id=stage_id, dev_id=dev_id, id__lt=id
#     ).order_by('-id').first()

#     if not prev_content:
#         # If there is no previous content, move to the last content of the previous stage
#         prev_stage = devModels.Module_Stage.objects.filter(id__lt=stage_id, dev_id=dev_id).order_by('-id').first()
#         if prev_stage:
#             prev_content = devModels.Course_Module_Content.objects.filter(
#                 stage_id=prev_stage.id, dev_id=dev_id
#             ).order_by('-id').first()

#     if prev_content:
#         id = prev_content.id  # Update to the previous content's ID
#     else:
#         # If no previous content exists, stay on the same page
#         return redirect(reverse('course_document_content', args=[course_data_id, id]))

#     context = {
#         "course_document_content_data": course_document_content_data,
#         'course_data': course_data,
#         'course_data_id': course_data.id,
#         'stage_data_id': stage_id,
#         'course_module_data': course_module_data,
#         'module_stage_data': module_stage_data_details,
#         'module_content_data': module_content_data_details,
#         'is_first_content': is_first_content,
#     }
#     return redirect(reverse('course_document_content', args=[course_data_id, id]))




# def next_documentation(request, course_data_id, id):
#     course_data = devModels.Online_Certification_Course.objects.get(id=course_data_id)
#     dev_id = course_data.dev_id
#     course_module_data = devModels.Module_list.objects.filter(course_id=course_data_id, dev_id=dev_id)
    
#     module_stage_data_details = {}
#     module_content_data_details = {}

#     for module_data in course_module_data:
#         module_id = module_data.id
#         module_stage_data = list(devModels.Module_Stage.objects.filter(module_id=module_id, dev_id=dev_id))
#         if module_stage_data:
#             module_stage_data_details[module_id] = module_stage_data

#             for stage in module_stage_data:
#                 stage_id = stage.id
#                 course_module_content_data = list(devModels.Course_Module_Content.objects.filter(stage_id=stage_id, dev_id=dev_id))
#                 if course_module_content_data:
#                     module_content_data_details[stage_id] = course_module_content_data

#     try:
#         course_document_content_data = devModels.Course_Module_Content.objects.get(id=id)
#     except devModels.Course_Module_Content.DoesNotExist:
#         raise Http404("Content not found")

#     # ✅ Extract stage_id properly
#     stage_id = course_document_content_data.stage_id.id  

#     # Get the last stage and last content of the course
#     last_stage = devModels.Module_Stage.objects.filter(
#         module_id__in=course_module_data.values_list('id', flat=True), dev_id=dev_id
#     ).order_by('-id').first()

#     last_content = devModels.Course_Module_Content.objects.filter(
#         stage_id=stage_id, dev_id=dev_id
#     ).order_by('-id').first()

#     # Check if the current content is the last in the course
#     is_last_content = (course_document_content_data.id == last_content.id) and (stage_id == last_stage.id)

#     # Find the next content
#     next_content = devModels.Course_Module_Content.objects.filter(
#         stage_id=stage_id, dev_id=dev_id, id__gt=id
#     ).order_by('id').first()

#     if not next_content:
#         # If no next content, move to the first content of the next stage
#         next_stage = devModels.Module_Stage.objects.filter(id__gt=stage_id, dev_id=dev_id).order_by('id').first()
#         if next_stage:
#             next_content = devModels.Course_Module_Content.objects.filter(
#                 stage_id=next_stage.id, dev_id=dev_id
#             ).order_by('id').first()

#     if next_content:
#         id = next_content.id  # Update to the next content's ID
#     else:
#         # If no next content exists, stay on the same page
#         return redirect(reverse('course_document_content', args=[course_data_id, id]))

#     context = {
#         "course_document_content_data": course_document_content_data,
#         'course_data': course_data,
#         'course_data_id': course_data.id,
#         'stage_data_id': stage_id,
#         'course_module_data': course_module_data,
#         'module_stage_data': module_stage_data_details,
#         'module_content_data': module_content_data_details,
#         'is_last_content': is_last_content,
#     }

#     # add student id ,course id, document id to database
#     if studentModels.Course_Progress_Tracker.objects.filter(student_id=request.user,course_id=course_data_id,document_id=course_document_content_data).exists():
#         return redirect(reverse('course_document_content', args=[course_data_id, id]))
#     studentModels.Course_Progress_Tracker.objects.create(
#         student_id=request.user,
#         course_id=course_data,
#         document_id=course_document_content_data,
#         is_completed=True
#     )

#     return redirect(reverse('course_document_content', args=[course_data_id, id]))
